name: Unity Build

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # build-linux:
  #   runs-on: ubuntu-latest
  #   env:
  #     UNITY_VERSION: 6000.0.44f1
  #     HASH: 101c91f3a8fb
  #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #     UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #     CACHE_DIR: $HOME/.cache/unity
  #     INSTALLER_PATH: $HOME/.cache/unity/Unity-6000.0.44f1.tar.xz
  #     BASE_URL: https://download.unity3d.com/download_unity

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Prepare cache directory
  #       run: mkdir -p ~/.cache/unity

  #     - name: Cache Unity installation
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/unity
  #         key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}

  #     - name: Download Unity Installer
  #       run: |
  #         set -e

  #         echo "üìÖ Downloading Unity Editor"

  #         if [ ! -f "${{ env.INSTALLER_PATH }}" ]; then
  #           wget -O "${{ env.INSTALLER_PATH }}" "${{ env.BASE_URL }}/${{ env.HASH }}/LinuxEditorInstaller/Unity-${{ env.UNITY_VERSION }}.tar.xz"
  #         else
  #           echo "‚úÖ Found Unity installer in cache."
  #         fi

  #         sudo mkdir -p /opt/unity
  #         sudo tar -xJf "${{ env.INSTALLER_PATH }}" -C /opt/unity
  #         echo "‚úÖ Unity installed to /opt/unity"

  #     - name: Activate Unity License (Pro)
  #       run: |
  #         /opt/unity/Editor/Unity \
  #           -batchmode -nographics -quit \
  #           -logFile - \
  #           -serial "$UNITY_LICENSE" \
  #           -username "$UNITY_EMAIL" \
  #           -password "$UNITY_PASSWORD"

  #     - name: Build Project for Linux
  #       run: |
  #         /opt/unity/Editor/Unity -batchmode -nographics -quit \
  #           -projectPath Test/QualityBuddyDev \
  #           -buildTarget StandaloneLinux64 \
  #           -buildLinux64Player Test/QualityBuddyDev/build/Linux/QualityBuddy.x86_64 \
  #           -logFile /dev/stdout

  #     - name: Upload Linux Build
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: QualityBuddy-Linux
  #         path: |
  #           Test/QualityBuddyDev/build/Linux/QualityBuddy.x86_64
  #           Test/QualityBuddyDev/build/Linux/UnityPlayer.so
  #           Test/QualityBuddyDev/build/Linux/QualityBuddy_Data/**
  #           Test/QualityBuddyDev/build/Linux/libdecor-0.so.0
  #           Test/QualityBuddyDev/build/Linux/libdecor-cairo.so

  #     - name: Deactivate Unity License
  #       if: always()
  #       run: |
  #         /opt/unity/Editor/Unity -batchmode -nographics -returnlicense -logFile /dev/stdout || true

  build-windows:
    runs-on: windows-latest
    #needs: build-linux # Ensure Linux build is completed first as we have 1 license.
    env:
      UNITY_VERSION: 6000.0.44f1
      HASH: 101c91f3a8fb
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      BASE_URL: https://download.unity3d.com/download_unity
      INSTALLER_PATH: C:\\Unity\\UnitySetup64.exe
      UNITY_PATH: C:\\Unity\\Editor\\Unity.exe

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache Unity installer (Windows)
        uses: actions/cache@v3
        with:
          path: C:\\Unity\\UnitySetup64.exe
          key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}

      - name: Create Unity directories
        run: |
          $directories = @(
            "C:\Users\runneradmin\AppData\Local\Unity\Caches",
            "C:\Users\runneradmin\AppData\Local\Unity",
            "C:\ProgramData\Unity",
            "C:\ProgramData\Unity\config",
            "C:\UnityTemp"
          )
          
          foreach ($dir in $directories) {
            New-Item -ItemType Directory -Force -Path $dir | Out-Null
            Write-Host "Created directory: $dir"
          }

      - name: Download Unity Installer
        run: |
          $ErrorActionPreference = "Stop"

          New-Item -ItemType Directory -Force -Path "C:\Unity" | Out-Null

          if (-Not (Test-Path "${env:INSTALLER_PATH}")) {
            Write-Host "Downloading ${env:BASE_URL}/${env:HASH}/Windows64EditorInstaller/UnitySetup64.exe"
            Invoke-WebRequest "${env:BASE_URL}/${env:HASH}/Windows64EditorInstaller/UnitySetup64.exe" -OutFile "${env:INSTALLER_PATH}"
          } else {
            Write-Host "‚úÖ Found Unity installer in cache."
          }

      - name: Install Unity Editor
        run: 
          Start-Process -FilePath "${env:INSTALLER_PATH}" -ArgumentList "/S /D=C:\Unity" -Wait

      - name: Check Unity Path
        run: 
          Get-ChildItem -Path "C:\Unity" -Recurse -ErrorAction SilentlyContinue | Out-String | Write-Host

      - name: Activate Unity License (Pro)
        run: |
          $unityArgs = @(
            "-batchmode",
            "-nographics",
            "-quit",
            "-logFile", "-",
            "-serial", "$env:UNITY_LICENSE",
            "-username", "$env:UNITY_EMAIL",
            "-password", "$env:UNITY_PASSWORD"
          )

          $process = Start-Process -FilePath "$env:UNITY_PATH" -ArgumentList $unityArgs -Wait -PassThru
          $exitCode = $process.ExitCode

          Write-Host "Unity exited with code: $exitCode"

          if ($exitCode -ne 0) {
            Write-Host "‚ùå License activation failed."
            exit $exitCode
          }

          # Debug info
          Write-Host "Getting Unity license directory..."
          Get-ChildItem "$env:USERPROFILE\AppData\Local\Unity" -Recurse -ErrorAction SilentlyContinue | Out-String | Write-Host


          

      # - name: Debug License Content
      #   run: |
      #     Write-Host "License content length: $($env:UNITY_LICENSE.Length)"
      #     Write-Host "First 100 characters:"
      #     Write-Host $env:UNITY_LICENSE.Substring(0, [Math]::Min(100, $env:UNITY_LICENSE.Length))


      - name: Build Project for Windows
        run: |
          & $env:UNITY_PATH -batchmode -nographics -quit `
            -projectPath Test/QualityBuddyDev `
            -buildTarget StandaloneWindows64 `
            -buildWindows64Player Test/QualityBuddyDev/build/Windows/QualityBuddy.exe `
            -logFile -
          
          Write-Host "Unity command completed. LASTEXITCODE=$LASTEXITCODE"

          if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed with exit code: $LASTEXITCODE"
            #exit 1
          }

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: QualityBuddy-Windows
          path: |
            Test/QualityBuddyDev/build/Windows/QualityBuddy.exe
            Test/QualityBuddyDev/build/Windows/UnityPlayer.dll
            Test/QualityBuddyDev/build/Windows/QualityBuddy_Data/**

      - name: List Unity license files
        run: |
          $paths = @(
            "C:\ProgramData\Unity",
            "$env:USERPROFILE\AppData\Local\Unity",
            "$env:USERPROFILE\AppData\Roaming\Unity"
          )

          foreach ($path in $paths) {
            Write-Host "üîç Listing files in $path"
            if (Test-Path $path) {
              Get-ChildItem -Path $path -Recurse -ErrorAction SilentlyContinue | Out-String | Write-Host
            } else {
              Write-Host "‚ùå $path not found"
            }
          }

      - name: Upload license log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Unity.Licensing.Client.log
          path: |
            C:\Users\runneradmin\AppData\Local\Unity\Unity.Licensing.Client.log

      - name: Deactivate Unity License
        if: always()
        run: |
          & $env:UNITY_PATH -batchmode -nographics -returnlicense -logFile - || true
